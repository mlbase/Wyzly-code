generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int           @id @default(autoincrement())
  email          String        @unique @db.VarChar(255)
  username       String        @unique @db.VarChar(100)
  password       String        @db.VarChar(255)
  role           String        @default("customer") @db.VarChar(20)
  phoneNumber    String?       @map("phone_number") @db.VarChar(20)
  age            Int?
  gender         String?       @db.VarChar(10)
  address        String?
  createdAt      DateTime?     @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt      DateTime?     @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  adminApprovals CancelOrder[] @relation("AdminApprovals")
  cancelOrders   CancelOrder[]
  orders         Order[]
  restaurants    Restaurant[]

  @@index([email], map: "idx_users_email")
  @@index([role], map: "idx_users_role")
  @@map("users")
}

model Restaurant {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(255)
  phoneNumber String?   @map("phone_number") @db.VarChar(20)
  description String?
  ownerId     Int?      @map("owner_id")
  createdAt   DateTime? @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt   DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  boxes       Box[]
  owner       User?     @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("restaurants")
}

model Box {
  id                Int                @id @default(autoincrement())
  title             String             @db.VarChar(255)
  price             Decimal            @db.Decimal(10, 2)
  quantity          Int                @default(0)
  image             String?            @db.VarChar(500)
  restaurantId      Int?               @map("restaurant_id")
  isAvailable       Boolean            @default(true) @map("is_available")
  createdAt         DateTime?          @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt         DateTime?          @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  restaurant        Restaurant?        @relation(fields: [restaurantId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  inventoryCommands InventoryCommand[]
  orders            Order[]

  @@index([isAvailable], map: "idx_boxes_is_available")
  @@index([restaurantId], map: "idx_boxes_restaurant_id")
  @@map("boxes")
}

model InventoryCommand {
  id               Int       @id @default(autoincrement())
  type             String    @db.VarChar(20)
  boxId            Int?      @map("box_id")
  quantity         Int
  previousQuantity Int       @map("previous_quantity")
  createdAt        DateTime? @default(now()) @map("created_at") @db.Timestamp(6)
  box              Box?      @relation(fields: [boxId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([boxId], map: "idx_inventory_commands_box_id")
  @@map("inventory_commands")
}

model Order {
  id           Int           @id @default(autoincrement())
  userId       Int?          @map("user_id")
  boxId        Int?          @map("box_id")
  quantity     Int
  totalPrice   Decimal       @map("total_price") @db.Decimal(10, 2)
  status       String        @default("pending") @db.VarChar(20)
  isCancelled  Boolean       @default(false) @map("is_cancelled")
  createdAt    DateTime?     @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt    DateTime?     @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  cancelOrders CancelOrder[]
  box          Box?          @relation(fields: [boxId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user         User?         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  payment      Payment[]

  @@index([createdAt], map: "idx_orders_created_at")
  @@index([status], map: "idx_orders_status")
  @@index([userId], map: "idx_orders_user_id")
  @@map("orders")
}

model Payment {
  id            Int       @id @default(autoincrement())
  orderId       Int?      @map("order_id")
  amount        Decimal   @db.Decimal(10, 2)
  status        String    @default("pending") @db.VarChar(20)
  method        String    @default("mock") @db.VarChar(20)
  transactionId String?   @map("transaction_id") @db.VarChar(255)
  createdAt     DateTime? @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt     DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  order         Order?    @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([orderId], map: "idx_payments_order_id")
  @@map("payments")
}

model CancelOrder {
  id         Int       @id @default(autoincrement())
  orderId    Int?      @map("order_id")
  userId     Int?      @map("user_id")
  isApproved Boolean?  @default(false) @map("is_approved")
  adminId    Int?      @map("admin_id")
  reason     String?
  createdAt  DateTime? @default(now()) @map("created_at") @db.Timestamp(6)
  approvedAt DateTime? @map("approved_at") @db.Timestamp(6)
  admin      User?     @relation("AdminApprovals", fields: [adminId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  order      Order?    @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user       User?     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([orderId], map: "idx_cancel_orders_order_id")
  @@map("cancel_orders")
}
